#!/usr/bin/env bash

set -Eeuo pipefail
shopt -s nullglob dotglob extglob

if [[ "$#" -eq "0"   ]]
then
    echo "Requires a VM name to create"
        exit 1
fi

mgmt_net="TOBESET"
vmks=""
vmurl=""
vmname="$1"

vmbase="${vmname%%-*}"

vmid="${vmname#*-}"

vmuefi=""
vmrel=""
vmiso=""
vmtype=""

if [[ "${vmid}" == ${vmbase} ]] || [[ "${vmid}" == "" ]]
then
    echo "Need a name after the base type"
    exit 1
fi

case  $vmbase in
    c6?(u)) vmrel="rhel6.9"
            vmtype="linux"
            vmks="http://${mgmt_net}.1/ks/el6-ks.cfg"
            vmurl="http://mirror.centos.org/centos-6/6/os/x86_64/"
        ;;
    c7?(u)) vmrel="rhel7.7"
            vmtype="linux"
            vmks="http://${mgmt_net}.1/ks/el7-ks.cfg"
            vmurl="http://mirror.centos.org/centos-7/7/os/x86_64/"
        ;;
    c8?(u)) vmrel="rhel8.0"
            vmtype="linux"
            vmks="http://${mgmt_net}.1/ks/el8-ks.cfg"
            vmurl="http://mirror.centos.org/centos-8/8/BaseOS/x86_64/kickstart/"
        ;;
    f29?(u)) vmrel="fedora29"
             vmtype="linux"
             vmks="http://${mgmt_net}.1/ks/f29-ks.cfg"
             vmurl="http://dl.fedoraproject.org/pub/fedora/linux/releases/29/Server/x86_64/os/"
        ;;
    f30?(u)) vmrel="fedora30"
             vmtype="linux"
             vmks="http://${mgmt_net}.1/ks/f30-ks.cfg"
             vmurl="http://dl.fedoraproject.org/pub/fedora/linux/releases/30/Server/x86_64/os/"
        ;;
    f31?(u)) vmrel="fedora31"
             vmtype="linux"
             vmks="http://${mgmt_net}.1/ks/f31-ks.cfg"
             vmurl="http://dl.fedoraproject.org/pub/fedora/linux/development/31/Server/x86_64/os/"
        ;;
    fraw?(u)) vmrel="fedora26"
              vmtype="linux"
              vmks="http://${mgmt_net}.1/ks/fraw-ks.cfg"
              vmurl="http://dl.fedoraproject.org/pub/fedora/linux/development/rawhide/Server/x86_64/os/"
        ;;
    w?(7|8|10)?(u)) ;;
    *)  echo "base not recognised, must be c6, c7, f25-27, w7, w8, w10 or fraw or a uefi variant"
        exit 1
        ;;
esac


if [[ "$vmbase" =~ .*u ]]
then
  vmuefi="--controller usb,model=nec-xhci \
    --boot uefi --machine q35 \
    --input tablet,bus=virtio --input keyboard,bus=virtio"
fi

if [[ "$vmbase" =~ w.* ]]
then
  case $vmbase in
   w7?(u)) vmrel="win7"
           vmtype="windows"
           vmiso="en_windows_7_professional_with_sp1_x64_dvd_u_676939.iso"
           ;;
   w8?(u)) vmrel="win8.1"
           vmtype="windows"
           vmiso="w8-usb-install.qcow2"
           ;;
   w10?(u)) vmrel="win10"
            vmtype="windows"
            vmiso="Win10_1703_English_x64.iso"
           ;;
  esac
fi

if [[ "$vmtype" == "linux" ]]
then
  virt-install -n ${vmname} \
            --memory memory=1536,maxmemory=4096 \
            --vcpus vcpus=1,maxvcpus=3 \
            --cpu host \
            --clock offset=utc,kvmclock_present=yes \
            --features acpi=on,apic=on \
            --os-variant="${vmrel}" \
            --location "${vmurl}" \
            --extra-args "ks=${vmks}" \
            --disk pool=default,size=20,bus=scsi,sparse=yes,format=raw,cache=unsafe \
            --network network=default,model=virtio \
            --graphics spice \
            --sound none \
            --controller scsi,model=virtio-scsi \
            --channel spicevmc,target_type=virtio \
            --channel unix,target_type=virtio,name=org.qemu.guest_agent.0 \
            --video qxl \
            --memballoon virtio \
            --rng /dev/urandom \
            --noautoconsole ${vmuefi}
fi

nohup virt-viewer -r -w ${vmname} &> /dev/null &



